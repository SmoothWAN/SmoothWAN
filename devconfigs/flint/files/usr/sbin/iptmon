#!/bin/sh
# set -x

BACKUP_TABLE=/etc/iptmon_backup.ipt
BACKUP_TABLE_6=/etc/iptmon_backup6.ipt
TABLE=$(mktemp -p /tmp -u iptmon_XXXXXX)

LEASE_FILE=$(uci get dhcp.@dnsmasq[0].leasefile)
STATIC_HOSTS_FILES="/etc/hosts /tmp/hosts/*"
ULA_PREFIX="$(uci get network.globals.ula_prefix 2>/dev/null)"

CHAIN_FW_TX="iptmon_tx"
CHAIN_FW_RX="iptmon_rx"
CHAIN_INPUT="iptmon_input"
CHAIN_OUTPUT="iptmon_output"

usage() {
	cat <<EOF

$0 init
	initialize iptmon chains

$0 [ add | old | del | arp-add | arp-old | arp-del ]
	dnsmasq functions to add / remove entries

$0 flush
	flush all iptmon chain entries

$0 reload-hosts
	reload static host entries

$0 remove
	remove iptmon chains and restore original mangle table
EOF
}

commit() {
	echo "COMMIT" >> $TABLE
	iptables-restore -T mangle < $TABLE
	ip6tables-restore -T mangle < $TABLE
}

backup_orig() {
	test -f $BACKUP_TABLE || iptables-save -t mangle > $BACKUP_TABLE
	test -f $BACKUP_TABLE_6 || ip6tables-save -t mangle > $BACKUP_TABLE_6
}

restore_orig() {
	iptables-restore -T mangle < $BACKUP_TABLE
	ip6tables-restore -T mangle < $BACKUP_TABLE_6
	rm -f $BACKUP_TABLE $BACKUP_TABLE_6
}

init_chain() {
 cat <<-EOF >> $TABLE
		*mangle
		:PREROUTING ACCEPT
		:INPUT ACCEPT
		:FORWARD ACCEPT
		:OUTPUT ACCEPT
		:POSTROUTING ACCEPT
		:$CHAIN_FW_TX - [0:0]
		:$CHAIN_FW_RX - [0:0]
		:$CHAIN_INPUT - [0:0]
		:$CHAIN_OUTPUT - [0:0]
		-A INPUT -j $CHAIN_INPUT
		-A FORWARD -j $CHAIN_FW_TX
		-A FORWARD -j $CHAIN_FW_RX
		-A OUTPUT -j $CHAIN_OUTPUT
		-F $CHAIN_FW_TX
		-F $CHAIN_FW_RX
	EOF
}

finalize_chain() {
	cat <<-EOF >> $TABLE
		-A $CHAIN_INPUT -j RETURN
		-A $CHAIN_OUTPUT -j RETURN
	EOF
}

_cleanup() {
	rm -f $TABLE
}

test_family() {
	FAMILY=4
	BITS=32
	IPTABLES="/usr/sbin/iptables"
	if { printf "%s" $1 | grep -q ":"; } ; then
		IPTABLES="/usr/sbin/ip6tables"
		FAMILY=6
		BITS=128
	fi
}

reverse_lookup() {
	local mac ip host
	mac=$1
	ip=$2

	# first check lease file, then try reverse lookup
	host=$( grep ${mac} ${LEASE_FILE} | awk '{print $4}' )
	if [[ "${host}x" = "x" ]] ; then
		host=$(nslookup ${ip} | grep 'name = ' | sed -E 's/^.*name = ([a-zA-Z0-9-]+).*$/\1/')
	fi
	printf "%s" ${host}
}

dnsmasq_add() {
	mac=$1
	ip=$2
	host=${3:-$ip}
	test_family $ip

	# ignore link-local addresses
	test "${ip:0:4}" == "fe80" && return 0
	# ignore ULA address
	test "${ip:0:4}" == "${ULA_PREFIX:0:4}" && return 0

	# If the rule exists, replace it, making sure we have the most up-to-date address.
	# Needed particularly for IPv6 as clients decide to use SLAAC addresses instead of
	# DHCP-assigned, updating the neighbor table as addresses rotate.
	for chain in $CHAIN_FW_TX $CHAIN_FW_RX; do
		case $chain in
		$CHAIN_FW_TX)
			SRC_DST='-d'
			PREFIX='tx'
		;;
		$CHAIN_FW_RX)
			SRC_DST='-s'
			PREFIX='rx'
		;;
		esac
		# check if the rule has already been added by hostname or by ip
		# and delete the associated rule(s)
		EXISTING=$(${IPTABLES}-save -t mangle | grep "iptmon_${PREFIX}" | \
			grep -e "${host}" -e "${ip}\/${BITS}" | sed 's/-A/-D/') 
		if [[ -n "${EXISTING}" ]] ; then
			printf 'removing existing IPv%d %s rule for %s\n' $FAMILY $PREFIX "${host}"
			OLD_IFS=${IFS}
			IFS=$'\n'; for rule in $EXISTING; do eval "$IPTABLES -t mangle $rule"; done
			IFS=$OLD_IFS
		fi
		$IPTABLES -t mangle -A $chain $SRC_DST $ip -j RETURN -m comment --comment "${PREFIX}_${host}"
	done

	printf "added iptmon entry for %s %s\n" "${ip}" "${host}"
}

dnsmasq_arp_add() {
	mac=$1
	ip=$2
	host=$( reverse_lookup ${mac} ${ip} )
	test "${host}x" = 'x' || dnsmasq_add $mac $ip $host
}

dnsmasq_del() {
	mac=$1
	ip=$2
	host=${3:-$ip}
	test_family $ip

	for chain in $CHAIN_FW_TX $CHAIN_FW_RX; do
		case $chain in
		$CHAIN_FW_TX)
			SRC_DST='-d'
			PREFIX='tx'
		;;
		$CHAIN_FW_RX)
			SRC_DST='-s'
			PREFIX='rx'
		;;
		esac

		if $IPTABLES -t mangle -nL $chain | grep -q "${ip}" ; then
			$IPTABLES -t mangle -D $chain $SRC_DST "${ip}" -j RETURN -m comment --comment "${PREFIX}_${host}"		
			printf "deleted IPv%d %s entry for %s %s\n" $FAMILY $PREFIX "${ip}" "${host}"
		fi
	done
}

dnsmasq_arp_del() {
	mac=$1
	ip=$2
	host=$( reverse_lookup ${mac} ${ip} )
	dnsmasq_del $mac $ip $host
}

load_static_hosts() {
	local static_hosts
	static_hosts=$(for file in $STATIC_HOSTS_FILES; do
		grep -v '^\s*$\|^\s*\#' $file | \
			awk '{print "ff:ff:ff:ff:ff:ff " $1 " " $2}'
	done)

	printf "$static_hosts" | \
		while IFS= read -r host; do
			eval dnsmasq_add $host;
		done
}

test "$(id -u)" -eq 0 || { echo "must be root"; exit 1; }
trap _cleanup EXIT

printf "received args: %s\n" "$*"
case $1 in
	"init")
		backup_orig
		init_chain
		finalize_chain
		commit
		load_static_hosts
	;;
	"add")
		shift
		dnsmasq_add "$@"
	;;
	"arp-add")
		shift
		dnsmasq_arp_add "$@"
	;;
	"old")
		shift
		dnsmasq_add "$@"
	;;
	"arp-old")
		shift
		dnsmasq_add "$@"
	;;
	"del")
		shift
		dnsmasq_del "$@"
	;;
	"arp-del")
		shift
		dnsmasq_arp_del "$@"
	;;
	"reload-hosts")
		load_static_hosts
	;;
	"flush")
		for chain in $CHAIN_FW_TX $CHAIN_FW_RX; do
			for cmd in iptables ip6tables; do
				$cmd -t mangle -F $chain
			done
		done
	;;
	"remove")
		restore_orig
	;;
 *)
	usage
	;;
esac